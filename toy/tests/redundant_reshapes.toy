# RUN: toyc %s -emit=mlir -opt 2>&1 | FileCheck %s

def double_reshape(a) {
  var b<1,8> = a;
  var c<4,2> = b;
  return(c);
}

def constant_reshape() {
  var a<4,1> = [1,2,3,4];
  var b<2,2> = a;
  return(b);
}

# TODO: Missing test for RedundantReshapeOptPattern, couldn't find a way to actually test it

# CHECK-LABEL:   toy.func @double_reshape(
# CHECK-SAME:    [[VAL_0:%.*]]: tensor<*xf64>) -> tensor<*xf64>
# CHECK-NEXT:    [[VAL_1:%.*]] = toy.reshape([[VAL_0]] : tensor<*xf64>) to tensor<4x2xf64>
# CHECK-NEXT:    toy.return [[VAL_1]] : tensor<4x2xf64>

# CHECK-LABEL:   toy.func @constant_reshape(
# CHECK-NEXT:    [[VAL_0:%.*]] = toy.constant
# CHECK-SAME:           dense<[
# CHECK-SAME:           [1.000000e+00, 2.000000e+00], [3.000000e+00, 4.000000e+00] 
# CHECK-SAME:           ]> : tensor<2x2xf64>
# CHECK-NEXT:    toy.return
