def main() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6];
  var b<3, 4> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var c = matmul(a, b);
  var d = transpose(c);
  print(d);
}

# CHECK-LABEL: toy.func @main()
# CHECK-NEXT:  [[VAL_0:%.*]] = toy.constant dense
# CHECK-SAME:    : tensor<6xf64>
# CHECK-NEXT:  [[VAL_1:%.*]] = toy.reshape([[VAL_0]] : tensor<6xf64>) to tensor<2x3xf64>
# CHECK-NEXT:  [[VAL_2:%.*]] = toy.constant dense
# CHECK-SAME:    : tensor<12xf64>
# CHECK-NEXT:  [[VAL_3:%.*]] = toy.reshape([[VAL_2]] : tensor<12xf64>) to tensor<3x4xf64>
# CHECK-NEXT:  [[VAL_4:%.*]] = toy.matmul [[VAL_1]], [[VAL_3]]
# CHECK-NEXT:  [[VAL_5:%.*]] = toy.transpose([[VAL_4]]
# CHECK-NEXT:  print [[VAL_5]]
# CHECK-NEXT:  return

# Verify that shape inference is working correctly
# OPT-LABEL: toy.func @main()
# OPT-NEXT:  [[VAL_0:%.*]] = toy.constant dense
# OPT-SAME:    tensor<2x3xf64>
# OPT-NEXT:  [[VAL_1:%.*]] = toy.constant dense
# OPT-SAME:    tensor<3x4xf64>
# OPT-NEXT:  [[VAL_2:%.*]] = toy.matmul [[VAL_0]], [[VAL_1]]
# OPT-SAME:    -> tensor<2x4xf64>
# OPT-NEXT:  [[VAL_3:%.*]] = toy.transpose([[VAL_2]]
# OPT-NEXT:  print [[VAL_3]]
# OPT-NEXT:  return
