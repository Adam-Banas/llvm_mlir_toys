# RUN: toyc %s -emit=mlir 2>&1 | FileCheck %s

# User defined generic function that operates on unknown shaped arguments
def multiply_transpose(a, b) {
  return transpose(a) * transpose(b);
}

def add_transpose(a, b) {
  return transpose(a) + transpose(b);
}

def sub_transpose(a, b) {
  return transpose(a) - transpose(b);
}

def main() {
  var a<2, 3> = [[1, 2, 3], [4, 5, 6]];
  var b<2, 3> = [6, 5, 4, 3, 2, 1];
  var c = multiply_transpose(a, b);
  var d = multiply_transpose(b, a);
  var e = sub_transpose(b, a);
  print(d);
  print(e);
}

# CHECK-LABEL: toy.func @main()
# CHECK-NEXT:         [[VAL_0:%.*]] = toy.constant
# CHECK-SAME:      dense<[
# CHECK-SAME:      [1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00] 
# CHECK-SAME:      ]> : tensor<2x3xf64>
# CHECK-NEXT:    [[VAL_1:%.*]] = toy.constant
# CHECK-SAME:      dense<[
# CHECK-SAME:      [6.000000e+00, 5.000000e+00, 4.000000e+00], [3.000000e+00, 2.000000e+00, 1.000000e+00] 
# CHECK-SAME:      ]> : tensor<2x3xf64>
# CHECK-NEXT:    [[VAL_2:%.*]] = toy.cast [[VAL_1]] : tensor<2x3xf64> to tensor<*xf64>
# CHECK-NEXT:    [[VAL_3:%.*]] = toy.cast [[VAL_0]] : tensor<2x3xf64> to tensor<*xf64>
# CHECK-NEXT:    [[VAL_4:%.*]] = toy.transpose([[VAL_2]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    [[VAL_5:%.*]] = toy.transpose([[VAL_3]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    [[VAL_6:%.*]] = toy.mul [[VAL_4]], [[VAL_5]] :  tensor<*xf64>
# CHECK-NEXT:    [[VAL_7:%.*]] = toy.cast [[VAL_1]] : tensor<2x3xf64> to tensor<*xf64>
# CHECK-NEXT:    [[VAL_8:%.*]] = toy.cast [[VAL_0]] : tensor<2x3xf64> to tensor<*xf64>
# CHECK-NEXT:    [[VAL_9:%.*]] = toy.transpose([[VAL_7]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    [[VAL_10:%.*]] = toy.transpose([[VAL_8]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    [[VAL_11:%.*]] = toy.sub [[VAL_9]], [[VAL_10]] :  tensor<*xf64>
# CHECK-NEXT:    toy.print [[VAL_6]] : tensor<*xf64>
# CHECK-NEXT:    toy.print [[VAL_11]] : tensor<*xf64>